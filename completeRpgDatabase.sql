-- Creates the Room Table 
CREATE TABLE ROOM(
    ROOM_ID     VARCHAR(10)     NOT NULL    UNIQUE,
    WEAPON_ID   VARCHAR(10),
    PRIMARY KEY(ROOM_ID));

-- Creates the Player Table with the foreign key dependence to the Room
-- Creates the recursive relationship that allows players to attack other players
CREATE TABLE PLAYER(
    PLAYER_ID    VARCHAR(10)    NOT NULL   UNIQUE,
    PNAME   VARCHAR(15)     NOT NULL,
    AGE     INTEGER             NOT NULL,
    HEALTH  INTEGER             NOT NULL, CONSTRAINT HEALTH_Ck CHECK(HEALTH BETWEEN 1 AND 100),
    CLASS   VARCHAR(15)         NOT NULL,
    ROLE    VARCHAR(15)         NOT NULL,
    PVP_TARGET   VARCHAR(10)     UNIQUE,
    ROOM_ID VARCHAR(10)         NOT NULL    UNIQUE,
    PRIMARY KEY(PLAYER_ID),
    FOREIGN KEY(ROOM_ID) REFERENCES ROOM(ROOM_ID),
    FOREIGN KEY(PVP_TARGET) REFERENCES PLAYER(PLAYER_ID));

-- Creates the Boss Table with the foreign key dependence to the Room
CREATE TABLE BOSS(
    BOSS_ID VARCHAR(10) NOT NULL    UNIQUE,
    BNAME    VARCHAR(15) NOT NULL,
    HEALTH  INTEGER NOT NULL, CONSTRAINT HEALTH_Ck CHECK (HEALTH BETWEEN 0 AND 100),
    DAMAGE  INTEGER NOT NULL, CONSTRAINT DAMAGE_Ck CHECK (DAMAGE BETWEEN 0 AND 100),
    DIFFICULTY  INTEGER NOT NULL, CONSTRAINT DIFFICULTY_Ck CHECK(DIFFICULTY BETWEEN 1 AND 10),
    ROOM_ID     VARCHAR(10)     NOT NULL    UNIQUE,
    PRIMARY KEY(BOSS_ID),
    FOREIGN KEY(ROOM_ID) REFERENCES ROOM(ROOM_ID));

-- Creates the Monster Table with the foreign key dependence to the Room
CREATE TABLE MONSTER(
    MONSTER_ID  VARCHAR(10) NOT NULL    UNIQUE,
    MNAME   VARCHAR(30) NOT NULL,
    HEALTH  INTEGER     NOT NULL, CONSTRAINT HEALTH_Ck CHECK (HEALTH BETWEEN 0 AND 100),
    CLASS   VARCHAR(20) NOT NULL,
    DIFFICULTY  INTEGER NOT NULL, CONSTRAINT DIFFICULTY_Ck CHECK (DIFFICULTY BETWEEN 1 AND 10),
    QUANTITY INTEGER NOT NULL,
    ROOM_ID VARCHAR(10) NOT NULL UNIQUE,
    PLAYER_ATTACK_TARGET    VARCHAR(10) UNIQUE,
    PRIMARY KEY(MONSTER_ID),
    FOREIGN KEY(ROOM_ID) REFERENCES ROOM(ROOM_ID),
    FOREIGN KEY(PLAYER_ATTACK_TARGET) REFERENCES PLAYER(PLAYER_ID));

-- Creates the Animal Table with the foreign key dependence to the Room
CREATE TABLE ANIMAL(
    ANIMAL_ID   VARCHAR(10) NOT NULL    UNIQUE,
    ANAME   VARCHAR(30) NOT NULL,
    HEALTH  INTEGER     NOT NULL, CONSTRAINT HEALTH_Ck CHECK (HEALTH BETWEEN 0 AND 100),
    FRIENDLY_LEVEL  INTEGER NOT NULL, CONSTRAINT FRIENDLY_Ck CHECK (FRIENDLY_LEVEL BETWEEN 0 AND 10),
    ROLE    VARCHAR(30) NOT NULL,
    ROOM_ID VARCHAR(10) NOT NULL    UNIQUE,
    PRIMARY KEY(ANIMAL_ID),
    FOREIGN KEY(ROOM_ID) REFERENCES ROOM(ROOM_ID));

-- Creates the Potion Bag middleman table to link to the Potions
CREATE TABLE POTIONBAG(
    PBAG_ID VARCHAR(10) NOT NULL    UNIQUE,
    CHARACTER_ID    VARCHAR(10) NOT NULL    UNIQUE,
    POTION_ID   VARCHAR(10) NOT NULL    UNIQUE,
    PRIMARY KEY(PBAG_ID),
    FOREIGN KEY(CHARACTER_ID) REFERENCES PLAYER(PLAYER_ID));

-- Creates the Potion Table with a foreign key dependence on PotionBag
CREATE TABLE POTION(
    POTION_ID   VARCHAR(10) NOT NULL    UNIQUE,
    PNAME   VARCHAR(30) NOT NULL,
    EFFECT  VARCHAR(30) NOT NULL,
    USES    INTEGER NOT NULL, CONSTRAINT USES_Ck CHECK (USES BETWEEN 1 AND 10),
    RARITY  INTEGER NOT NULL, CONSTRAINT RARITY_Ck CHECK (RARITY BETWEEN 1 AND 10),
    PRIMARY KEY(POTION_ID),
    FOREIGN KEY(POTION_ID) REFERENCES POTIONBAG(POTION_ID));

-- Creates the Obstacle Table with a foreign key dependence on Potion
CREATE TABLE OBSTACLE(
    OBSTACLE_ID VARCHAR(10) NOT NULL    UNIQUE,
    ONAME   VARCHAR(15) NOT NULL,
    HEALTH  INTEGER NOT NULL, CONSTRAINT HEALTH_Ck CHECK(HEALTH BETWEEN 0 AND 50),
    POTION_ID VARCHAR(10)   NOT NULL,
    PRIMARY KEY(OBSTACLE_ID),
    FOREIGN KEY(POTION_ID) REFERENCES POTION(POTION_ID));

-- Creates the WeaponBag Table with a forign key dependence on Player
CREATE TABLE WEAPONBAG(
    WBAG_ID VARCHAR(10) NOT NULL    UNIQUE,
    CHARACTER_ID VARCHAR(10) NOT NULL   UNIQUE,
    WEAPON_ID   VARCHAR(10) NOT NULL,
    PRIMARY KEY(WBAG_ID),
    FOREIGN KEY(CHARACTER_ID) REFERENCES PLAYER(PLAYER_ID));

-- Creates the Weapon Table with a foreign key dependence on WeaponBag
CREATE TABLE WEAPON(
    WEAPON_ID   VARCHAR(10) NOT NULL    UNIQUE,
    WBAG_ID VARCHAR(10) UNIQUE,
    ROOM_ID VARCHAR(10) UNIQUE,
    DAMAGE  INTEGER NOT NULL, CONSTRAINT DAMAGE_Ck CHECK(DAMAGE BETWEEN 1 AND 100),
    PRIMARY KEY(WEAPON_ID),
    FOREIGN KEY(WBAG_ID) REFERENCES WEAPONBAG(WBAG_ID),
    FOREIGN KEY(ROOM_ID) REFERENCES ROOM(ROOM_ID));

-- Creates the SkillBook middleman table to link to Skills
CREATE TABLE SKILLBOOK(
    SKILL_BOOK_ID   VARCHAR(10) NOT NULL UNIQUE,
    CHARACTER_ID    VARCHAR(10) NOT NULL UNIQUE,
    SKILL_ID    VARCHAR(10) UNIQUE,
    PRIMARY KEY(SKILL_BOOK_ID),
    FOREIGN KEY(CHARACTER_ID) REFERENCES PLAYER(PLAYER_ID));

-- Creates the SKill Table with a foreign key dependence to SkillBook
CREATE TABLE SKILL(
    SKILL_ID VARCHAR(10) NOT NULL UNIQUE,
    SNAME VARCHAR(30) NOT NULL UNIQUE,
    DAMAGE INTEGER NOT NULL, CONSTRAINT DAMAGE_Ck CHECK(DAMAGE BETWEEN 1 AND 100),
    LEVEL INTEGER NOT NULL, CONSTRAINT LEVEL_Ck CHECK(LEVEL BETWEEN 1 AND 10),
    SKILL_BOOK_ID VARCHAR(10) UNIQUE,
    BOSS_ID VARCHAR(10) NOT NULL UNIQUE,
    PRIMARY KEY(SKILL_ID),
    FOREIGN KEY(SKILL_BOOK_ID) REFERENCES SKILLBOOK(SKILL_BOOK_ID),
    FOREIGN KEY(BOSS_ID) REFERENCES BOSS(BOSS_ID));
